defaults: &defaults
  docker:
    - image: petrpliska/shopsys-buildpack:0.1.1
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
  working_directory: ~/source

login-to-dockerhub: &login-to-dockerhub
  name: Login to Docker hub
  command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin

version: 2
jobs:
  deploy-to-k8s:
    <<: *defaults
    steps:
      - setup_remote_docker
      - checkout
      - run:
           <<: *login-to-dockerhub
      - run:
          name: Build docker image
          command: |
            # Calculate Docker image tag from Dockerfile checksum. Docker Image tag is used later in Kubernetes deployment.
            # On shopsys development server we can assume, that Docker image used by Kubernetes deployment will be always present, because it was builded on same server.
            # In common we should push this image into Docker registry and use image from registry later.
            DOCKER_IMAGE="${DOCKER_IMAGE:=shopsys/shopsys}"
            DOCKER_IMAGE_TAG="$(cksum Dockerfile | cut -d ' ' -f1)"
            WWW_DATA_UID="${WWW_DATA_UID:=$(id -u)}"
            WWW_DATA_GID="${WWW_DATA_GID:=$(id -g)}"
            # @matous.czerner You can omit docker image pull part of following command.
            docker image pull $DOCKER_IMAGE:$DOCKER_IMAGE_TAG || (docker image build \
              --build-arg www_data_uid=$WWW_DATA_UID \
              --build-arg www_data_gid=$WWW_DATA_GID \
              --tag $DOCKER_IMAGE:$DOCKER_IMAGE_TAG \
              --tag $DOCKER_IMAGE:latest . && \
            # @matous.czerner On shopsys server you can omit following commands
            docker image push $DOCKER_IMAGE:$DOCKER_IMAGE_TAG &&
            docker image push $DOCKER_IMAGE:latest)
          working_directory: project-base/docker/php-fpm
      - run:
          name: Generate Kubernetes manifests for current build
          command: |
            DOCKER_IMAGE_TAG="$(cksum ../docker/php-fpm/Dockerfile | cut -d ' ' -f1)"
            yq write --inplace namespace.yml metadata.name $CIRCLE_BRANCH
            yq write --inplace ingress.yml spec.rules[0].host $CIRCLE_BRANCH.$DEVELOPMENT_SERVER_DOMAIN
            yq write --inplace deployments/webserver.yml spec.template.spec.containers[1].image $DOCKER_IMAGE:$DOCKER_IMAGE_TAG
            yq write --inplace deployments/webserver.yml spec.template.spec.volumes[0].hostPath.path /workspace/shopsys/$CIRCLE_BRANCH
          working_directory: project-base/k8s
          environment:
            DEVELOPMENT_SERVER_DOMAIN: p4a.me
      - run:
          name: Setup Kubernetes cluster connection
          command: |
            mkdir -p ~/.minikube
            mkdir -p ~/.kube
            echo -e $KUBERNETES_CONFIG_FILE > ~/.kube/config
            echo -e $KUBERNETES_CA_CRT > ~/.minikube/ca.crt
            echo -e $KUBERNETES_CLIENT_CRT > ~/.minikube/client.crt
            echo -e $KUBERNETES_CLIENT_KEY > ~/.minikube/client.key
      - run:
          name: Deploy application to Kubernetes cluster
          command: |
            kubectl apply -f namespace.yml
            kubectl config set-context $(kubectl config current-context) --namespace=$CIRCLE_BRANCH
            kubectl create configmap nginx-configuration --from-file ../docker/nginx/nginx.conf || true
            kubectl create configmap php-configuration --from-file ../docker/php-fpm/php-ini-overrides.ini || true
            kubectl apply --recursive -f .
          working_directory: project-base/k8s
      - run:
          name: Wait for rollouts
          command: |
            # Whole step will be reduced to one command in the future(When readiness probe will be implemented)
            declare -a deployments_to_wait_for=(
              "adminer"
              "postgres"
              "redis"
              "redis-admin"
              "selenium-server"
              "smtp-server"
              "webserver"
            )

            for deployment in "${deployments_to_wait_for[@]}"
            do
              kubectl rollout status deployment/$deployment --watch
            done
      - run:
          name: Install composer dependencies
          command: |
            PHP_FPM_POD=$(kubectl get pods -l app=webserver -o=jsonpath='{.items[0].metadata.name}')
            kubectl exec $PHP_FPM_POD -c php composer global require hirak/prestissimo
            kubectl exec $PHP_FPM_POD -c php -- composer config -g github-oauth.github.com $COMPOSER_GITHUB_OATUH_TOKEN
      - store_artifacts:
          path: project-base/k8s

workflows:
  version: 2
  deployment:
    jobs:
      - deploy-to-k8s:
          filters:
            tags:
              ignore: /.*/